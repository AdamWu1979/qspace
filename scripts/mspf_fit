#!/usr/bin/env python
import numpy as np
import nibabel as nib
from qspace.bases import sh, spf, mspf
from qspace.sampling import sphere, space
import argparse


description="Fit a mSPF basis to a 4d volume and reconstruct the marginal ODF."
parser = argparse.ArgumentParser(description=description)

parser.add_argument("dwis",
    help="DWIs as a 4d image in a format that nibabel can handle.")
parser.add_argument("-b", dest="bvals", required=True,
    help="Text file where the b-values are stored.")
parser.add_argument("-r", dest="bvecs", required=True,
    help="Text file where the unit gradient directions are stored.")
parser.add_argument("-m", dest="mask", 
    help="Path to mask image (a binary image in a format that nibabel can "
         "handle).")
parser.add_argument("-n", dest="radial_order", default=3,
    help="Radial truncation order of the (m)SPF basis. (%(default)s)")
parser.add_argument("-l", dest="angular_rank", default=6,
    help="Angular truncation rank of the (m)SPF basis. (%(default)s)")
parser.add_argument("-t", dest="tau", type=float, default=50.0,
    help="Diffusion time of the acquisition sequence in ms (%(default)s).")
parser.add_argument("-z", dest="zeta", type=float, default=700.0,
    help="Scale parameter of the (m)SPF basis in mm^-2 (%(default)s).")
parser.add_argument("-a", dest="alpha", type=float, default=0.5,
    help="Regularization weight for the Laplace regularization (%(default)s).")
args = parser.parse_args()


print "Read acquisition sequence..."
bvals = np.loadtxt(args.bvals)

bvecs = np.loadtxt(args.bvecs)
if bvecs.shape[0] != 3 and bvecs.shape[1] != 3:
    raise ValueError("bvec file should contain 3 rows/columns (x, y, z).")
if bvecs.shape[0] == 3 and bvecs.shape[1] != 3:
    bvecs = bvecs.T
if bvals.shape[0] != bvecs.shape[0]:
    raise ValueError("bval/bvec tables should have the same number of entries")



print "Read diffusion-weighted images..."
dwis_img = nib.load(args.dwis)
dwis = dwis_img.get_data()
dim_x, dim_y, dim_z = dwis.shape[:3]
K = dwis.shape[-1]

if args.mask is not None:
    mask_img = nib.load(args.mask)
    mask = mask_img.get_data()
    if mask.shape != (dim_x, dim_y, dim_z):
        raise ValueError("Mask and image: shape mismatch.")
else:
    mask = np.ones((dim_x, dim_y, dim_z))


print "Preparing reconstruction with Laplace regularization..."
print "\tCompute average b0 image"
b0_indices = bvals == 0
b0 = np.mean(dwis[..., b0_indices], axis=-1)

print "\tCompute diffusion signal attenuation"
dwis_indices = bvals > 0
signal = dwis[..., dwis_indices] / b0[..., np.newaxis]
del dwis, dwis_img, b0

print "\tCompute modified SPH observation and Laplace regularization matrices"
qnorms = np.sqrt(bvals[dwis_indices] / (4 * np.pi**2 * args.tau))
qs = qnorms[:, np.newaxis] * bvecs[dwis_indices]
theta, phi = sphere.to_spherical(bvecs[dwis_indices])
H = mspf.matrix(qnorms, theta, phi, radial_order=args.radial_order, 
      angular_rank=args.angular_rank, zeta=args.zeta)
Lambda = mspf.Lambda(args.radial_order, args.angular_rank, args.zeta)

print "\tCompute equivalent signal (see MedIA paper for details)."
signal -= np.exp(-qnorms**2 / (2 * args.zeta))[
  np.newaxis, np.newaxis, np.newaxis, :]

x0 = -np.dot(np.linalg.inv(Lambda), 
             mspf.v(args.radial_order, args.angular_rank, args.zeta))
signal -= np.dot(H, x0)[np.newaxis, np.newaxis, np.newaxis, :]


print "Reconstruction with Laplace regularization"
pseudo_inv = np.dot(np.linalg.inv(np.dot(H.T, H) + args.alpha * Lambda), H.T)
mspf_coefficients = np.dot(signal, pseudo_inv.T)
mspf_coefficients += x0[np.newaxis, np.newaxis, np.newaxis, :]


print "Using reconstructed signal to compute marginal ODF"
print "\tFirst convert back to SPF basis"
M = mspf.to_spf_matrix(args.radial_order, args.angular_rank, args.zeta)
spf_coefficients = np.dot(mspf_coefficients, M.T)

print "\tCompute ODF and save to disk"
dim_sh = sh.dimension(args.angular_rank)
odf_coefficients = np.zeros((dim_x, dim_y, dim_z, dim_sh))
spherical_polar_fourier = spf.SphericalPolarFourier(args.radial_order,
    args.angular_rank, args.zeta)
for i, j, k in zip(*np.nonzero(mask)):
    spherical_polar_fourier.coefficients = \
        spf_coefficients[i, j, k].reshape((args.radial_order, dim_sh))
    odf_coefficients[i, j, k] = spherical_polar_fourier.odf_marginal()

odf_img = nib.Nifti1Image(odf, dwis_img.get_affine())
nib.save(odf_img, "odf.nii.gz")
